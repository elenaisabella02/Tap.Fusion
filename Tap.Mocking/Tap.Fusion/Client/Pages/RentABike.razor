@page "/rentabike"
@using Tap.Fusion.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation


<PageTitle>Rent a Bike</PageTitle>
<style>
		body{
		background-image:url("https://img.freepik.com/free-photo/green-park-view_1417-1492.jpg");
		background-repeat:no-repeat;
		  background-size: cover;
		  backdrop-filter: blur(5px);
	}
</style>
<body>
<div class="text-center">
	<h2>Închiriază bicicleta</h2>
</div>
<form style="font-size:20px;">
  Alege bicileta dorită:
  <div class="row">
	 <div class="col-6">
		<input type="radio" id="citybike" name="bike" />
 			<label for="citybike">City Bike</label>
	</div>
	<div class="col-6">
		<input type="radio" id="mountainbike" name="bike" />
			<label for="mountainbike">Mountain Bike</label>
	</div>
  </div>
</form>
<br />
<h5>
  Bicicletele nu pot fi închiriate mai mult de 48 de ore
  <br />
  <small class="text-muted" style="font-size:15px;">Bicicletele închiriate pentru mai mult de 4 ore primesc 15% discount!</small>
</h5>
<br />
<div style="font-size:20px;">
	Câte ore doriți să închiriați bicicleta?
	<input type="number" id="hours" name="hours" max="48" @bind="rentalHours" />
	<br />
	Calculează prețul total:
	<button @onclick="CalculatePrice" class="btn btn-succes">Calculează</button>
	<br />
	Prețul total: 
	<br />@totalPriceCity pentru CityBike 
	<br />@totalPriceMountain pentru MountainBike
</div>
<br />
<div class ="form-group">
	<label>User:
		<input @bind="userName" />
	</label>
</div>

<SfSchedule Height ="550" TValue="AppData">
	<ScheduleEventSettings DataSource="@dataSource"></ScheduleEventSettings>
    <ScheduleEvents ActionCompleted="OnActionComplete"></ScheduleEvents>
</SfSchedule>
<hr />
@foreach(var message in messages)
{
	<SfMessage Severity="MessageSeverity.Info">@message</SfMessage>

}
</body>

@code{
	private List<AppData>? dataSource;
	private int rentalHours;
	private int totalPriceCity = 0;
	private int totalPriceMountain = 0;
	HubConnection? connection;
	private string? userName;
	List<string> messages = new List<string>();
	protected override async Task OnInitializedAsync()
	{
		dataSource = await Http.GetFromJsonAsync<List<AppData>>("AppData");
		connection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/schedulerhub")).Build();
		connection.On<string, List<AppData>, List<AppData>, List<AppData>>("ReceiveData", OnDataChange);
		await connection.StartAsync();
	}

	public EventCallback<ActionEventArgs<AppData>> OnActionComplete => EventCallback.Factory.Create<ActionEventArgs<AppData>>(this, HandleActionComplete);

	public async Task HandleActionComplete(ActionEventArgs<AppData> args)
	{
		if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventRemove || args.ActionType == ActionType.EventChange)
		{
			await connection.InvokeAsync("SendData", userName, args.AddedRecords, args.ChangedRecords, args.DeletedRecords);
		}
	}

	Task OnDataChange(string user, List<AppData> addedData, List<AppData> changedData, List<AppData> deletedData)
	{
		string msg = "";
		List<AppData> appData = dataSource.ToList();

		if (addedData != null && addedData.Count > 0)
		{
			foreach (AppData data in addedData)
			{
				appData.Add(data);
				msg = "added new reservation with subject " + data.Subject;
			}
		}
		else if (changedData != null && changedData.Count > 0)
		{
			foreach (AppData data in changedData)
			{
				int index = appData.FindIndex(m => m.Id == data.Id);
				if(index >= 0)
				{
					appData[index] = data;
					msg = "edited a reservation with subject " + appData[index].Subject;
				}
			}
		}
		else if (deletedData != null && deletedData.Count > 0)
		{
			foreach (AppData data in deletedData)
			{
				int index = appData.FindIndex(m => m.Id == data.Id);
				if(index >= 0)
				{
					msg = "deleted a reservation with subject " + appData[index].Subject;
					appData.RemoveAt(index);
				}
			}
		}
		this.dataSource = appData;
		messages.Add($"{user} {msg}");
		this.StateHasChanged();
		return Task.CompletedTask;
	}

	private void CalculatePrice()
	{
		if (rentalHours > 48)
		{
			totalPriceCity = 0;
			totalPriceMountain = 0;
			ShowAlert("Numărul de ore trebuie să fie mai mic sau egal cu 48!");
		}
		else
		{
			if (rentalHours < 4)
			{
				totalPriceCity = rentalHours * 5;
				totalPriceMountain = rentalHours * 10;
			}
			else
			{
				totalPriceCity = (rentalHours * 5) * 85 / 100;
				totalPriceMountain = (rentalHours * 10) * 85 / 100;
			}
        }
    }

	private void ShowAlert(string message)
    {
        JSRuntime.InvokeVoidAsync("alert", message);
    }

}